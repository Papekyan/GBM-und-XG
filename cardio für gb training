{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Papekyan/GBM-und-XG/blob/main/cardio%20f%C3%BCr%20gb%20training\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Risikofaktoren für Kardiovaskuläre Herzkrankheiten\n"
      ],
      "metadata": {
        "id": "8JFL06g8QAJd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "WRSDKmNxIkbM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 0. Import von Bibliotheken und Datenveranschaulichung"
      ],
      "metadata": {
        "id": "k0Am0QQaQTGG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Xfga-jZqghUC"
      },
      "outputs": [],
      "source": [
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import xgboost as xgb\n",
        "import seaborn as sns #Visualisierung\n",
        "import matplotlib.pyplot as plt #Visualisierung\n",
        "from sklearn.model_selection import train_test_split #Split Training- und Testdaten\n",
        "from sklearn.metrics import recall_score,precision_score, confusion_matrix, classification_report #Evaluation\n",
        "from sklearn.ensemble import GradientBoostingClassifier #GBM\n",
        "from sklearn.model_selection import GridSearchCV #hyperparameter tuning\n",
        "from xgboost import XGBClassifier #XGBoost\n",
        "from xgboost import plot_tree\n",
        "import shap\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Datenveranschaulichung"
      ],
      "metadata": {
        "id": "S_COx7DPO2D2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('heart_data.csv')\n",
        "\n",
        "df.info()\n",
        "df.describe()"
      ],
      "metadata": {
        "id": "gYeGr6AuiEHW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "79a63369-d18f-43c7-9186-0d4b687956f3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 70000 entries, 0 to 69999\n",
            "Data columns (total 14 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   index        70000 non-null  int64  \n",
            " 1   id           70000 non-null  int64  \n",
            " 2   age          70000 non-null  int64  \n",
            " 3   gender       70000 non-null  int64  \n",
            " 4   height       70000 non-null  int64  \n",
            " 5   weight       70000 non-null  float64\n",
            " 6   ap_hi        70000 non-null  int64  \n",
            " 7   ap_lo        70000 non-null  int64  \n",
            " 8   cholesterol  70000 non-null  int64  \n",
            " 9   gluc         70000 non-null  int64  \n",
            " 10  smoke        70000 non-null  int64  \n",
            " 11  alco         70000 non-null  int64  \n",
            " 12  active       70000 non-null  int64  \n",
            " 13  cardio       70000 non-null  int64  \n",
            "dtypes: float64(1), int64(13)\n",
            "memory usage: 7.5 MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              index            id           age        gender        height  \\\n",
              "count  70000.000000  70000.000000  70000.000000  70000.000000  70000.000000   \n",
              "mean   34999.500000  49972.419900  19468.865814      1.349571    164.359229   \n",
              "std    20207.403759  28851.302323   2467.251667      0.476838      8.210126   \n",
              "min        0.000000      0.000000  10798.000000      1.000000     55.000000   \n",
              "25%    17499.750000  25006.750000  17664.000000      1.000000    159.000000   \n",
              "50%    34999.500000  50001.500000  19703.000000      1.000000    165.000000   \n",
              "75%    52499.250000  74889.250000  21327.000000      2.000000    170.000000   \n",
              "max    69999.000000  99999.000000  23713.000000      2.000000    250.000000   \n",
              "\n",
              "             weight         ap_hi         ap_lo   cholesterol          gluc  \\\n",
              "count  70000.000000  70000.000000  70000.000000  70000.000000  70000.000000   \n",
              "mean      74.205690    128.817286     96.630414      1.366871      1.226457   \n",
              "std       14.395757    154.011419    188.472530      0.680250      0.572270   \n",
              "min       10.000000   -150.000000    -70.000000      1.000000      1.000000   \n",
              "25%       65.000000    120.000000     80.000000      1.000000      1.000000   \n",
              "50%       72.000000    120.000000     80.000000      1.000000      1.000000   \n",
              "75%       82.000000    140.000000     90.000000      2.000000      1.000000   \n",
              "max      200.000000  16020.000000  11000.000000      3.000000      3.000000   \n",
              "\n",
              "              smoke          alco        active        cardio  \n",
              "count  70000.000000  70000.000000  70000.000000  70000.000000  \n",
              "mean       0.088129      0.053771      0.803729      0.499700  \n",
              "std        0.283484      0.225568      0.397179      0.500003  \n",
              "min        0.000000      0.000000      0.000000      0.000000  \n",
              "25%        0.000000      0.000000      1.000000      0.000000  \n",
              "50%        0.000000      0.000000      1.000000      0.000000  \n",
              "75%        0.000000      0.000000      1.000000      1.000000  \n",
              "max        1.000000      1.000000      1.000000      1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68120f32-7f02-40ed-a84a-3b369d1df9a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>id</th>\n",
              "      <th>age</th>\n",
              "      <th>gender</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "      <th>ap_hi</th>\n",
              "      <th>ap_lo</th>\n",
              "      <th>cholesterol</th>\n",
              "      <th>gluc</th>\n",
              "      <th>smoke</th>\n",
              "      <th>alco</th>\n",
              "      <th>active</th>\n",
              "      <th>cardio</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>34999.500000</td>\n",
              "      <td>49972.419900</td>\n",
              "      <td>19468.865814</td>\n",
              "      <td>1.349571</td>\n",
              "      <td>164.359229</td>\n",
              "      <td>74.205690</td>\n",
              "      <td>128.817286</td>\n",
              "      <td>96.630414</td>\n",
              "      <td>1.366871</td>\n",
              "      <td>1.226457</td>\n",
              "      <td>0.088129</td>\n",
              "      <td>0.053771</td>\n",
              "      <td>0.803729</td>\n",
              "      <td>0.499700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>20207.403759</td>\n",
              "      <td>28851.302323</td>\n",
              "      <td>2467.251667</td>\n",
              "      <td>0.476838</td>\n",
              "      <td>8.210126</td>\n",
              "      <td>14.395757</td>\n",
              "      <td>154.011419</td>\n",
              "      <td>188.472530</td>\n",
              "      <td>0.680250</td>\n",
              "      <td>0.572270</td>\n",
              "      <td>0.283484</td>\n",
              "      <td>0.225568</td>\n",
              "      <td>0.397179</td>\n",
              "      <td>0.500003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>10798.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>-150.000000</td>\n",
              "      <td>-70.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>17499.750000</td>\n",
              "      <td>25006.750000</td>\n",
              "      <td>17664.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>159.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>34999.500000</td>\n",
              "      <td>50001.500000</td>\n",
              "      <td>19703.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>52499.250000</td>\n",
              "      <td>74889.250000</td>\n",
              "      <td>21327.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>170.000000</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>69999.000000</td>\n",
              "      <td>99999.000000</td>\n",
              "      <td>23713.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>250.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>16020.000000</td>\n",
              "      <td>11000.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68120f32-7f02-40ed-a84a-3b369d1df9a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68120f32-7f02-40ed-a84a-3b369d1df9a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68120f32-7f02-40ed-a84a-3b369d1df9a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-df2623ff-6f55-4389-b22c-fe94c1276a6b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df2623ff-6f55-4389-b22c-fe94c1276a6b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-df2623ff-6f55-4389-b22c-fe94c1276a6b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25228.11969743836,\n        \"min\": 0.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          70000.0,\n          34999.5,\n          52499.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31827.887052457594,\n        \"min\": 0.0,\n        \"max\": 99999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49972.4199,\n          50001.5,\n          70000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20122.620892544895,\n        \"min\": 2467.2516672413913,\n        \"max\": 70000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19468.865814285713,\n          19703.0,\n          70000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.291546070857,\n        \"min\": 0.47683801558294814,\n        \"max\": 70000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.3495714285714286,\n          2.0,\n          0.47683801558294814\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24699.778932713376,\n        \"min\": 8.210126364538139,\n        \"max\": 70000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          164.35922857142856,\n          165.0,\n          70000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24722.66291857437,\n        \"min\": 10.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          74.20569,\n          72.0,\n          70000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ap_hi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24555.361090359613,\n        \"min\": -150.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          70000.0,\n          128.8172857142857,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ap_lo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24470.09920176698,\n        \"min\": -70.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          70000.0,\n          96.63041428571428,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.229896533994,\n        \"min\": 0.6802503486997775,\n        \"max\": 70000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          70000.0,\n          1.3668714285714285,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gluc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.29294957143,\n        \"min\": 0.5722702766136001,\n        \"max\": 70000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.226457142857143,\n          3.0,\n          0.5722702766136001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.66806700679,\n        \"min\": 0.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.08812857142857143,\n          1.0,\n          0.28348381677011014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alco\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.6727275117,\n        \"min\": 0.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.053771428571428574,\n          1.0,\n          0.22556770360401027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"active\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.474658736734,\n        \"min\": 0.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.8037285714285715,\n          1.0,\n          0.3971790635048892\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cardio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24748.585837128438,\n        \"min\": 0.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4997,\n          1.0,\n          0.5000034814661523\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info(-3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1oPye4WBiZhY",
        "outputId": "4b50be6f-2b44-4516-b991-b1fa9b3c190a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 70000 entries, 0 to 69999\n",
            "Data columns (total 14 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   index        70000 non-null  int64  \n",
            " 1   id           70000 non-null  int64  \n",
            " 2   age          70000 non-null  int64  \n",
            " 3   gender       70000 non-null  int64  \n",
            " 4   height       70000 non-null  int64  \n",
            " 5   weight       70000 non-null  float64\n",
            " 6   ap_hi        70000 non-null  int64  \n",
            " 7   ap_lo        70000 non-null  int64  \n",
            " 8   cholesterol  70000 non-null  int64  \n",
            " 9   gluc         70000 non-null  int64  \n",
            " 10  smoke        70000 non-null  int64  \n",
            " 11  alco         70000 non-null  int64  \n",
            " 12  active       70000 non-null  int64  \n",
            " 13  cardio       70000 non-null  int64  \n",
            "dtypes: float64(1), int64(13)\n",
            "memory usage: 7.5 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Kardinalität der Spalten\n",
        "print(df.nunique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i6tcqyWFQpbw",
        "outputId": "57c692af-7916-4a51-80ed-f1dd48142dba"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "index          70000\n",
            "id             70000\n",
            "age             8076\n",
            "gender             2\n",
            "height           109\n",
            "weight           287\n",
            "ap_hi            153\n",
            "ap_lo            157\n",
            "cholesterol        3\n",
            "gluc               3\n",
            "smoke              2\n",
            "alco               2\n",
            "active             2\n",
            "cardio             2\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Datenaufbereitung"
      ],
      "metadata": {
        "id": "iubr3avEQjzC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "t0XLbr7SQ4VY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Alter in Jahre umrechnen\n",
        "df['age_years'] = df ['age']/365"
      ],
      "metadata": {
        "id": "vmqz2HU-EGWA"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#BMI und nicht benötigte Spalten entfernen\n",
        "df['male'] = df['gender'].apply(lambda x: 1 if x == 1 else 0)\n",
        "df['female'] = df['gender'].apply(lambda x: 1 if x == 2 else 0)\n",
        "df['bmi'] = df['weight'] / ((df['height'] / 100) ** 2)\n",
        "df = df.drop(['index','id','height','weight','gender'],axis=1)\n",
        "\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WkM1yLE7G-WF",
        "outputId": "bf143ec8-af9b-4459-e9f6-4869f6e2fc4a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 70000 entries, 0 to 69999\n",
            "Data columns (total 13 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   age          70000 non-null  int64  \n",
            " 1   ap_hi        70000 non-null  int64  \n",
            " 2   ap_lo        70000 non-null  int64  \n",
            " 3   cholesterol  70000 non-null  int64  \n",
            " 4   gluc         70000 non-null  int64  \n",
            " 5   smoke        70000 non-null  int64  \n",
            " 6   alco         70000 non-null  int64  \n",
            " 7   active       70000 non-null  int64  \n",
            " 8   cardio       70000 non-null  int64  \n",
            " 9   age_years    70000 non-null  float64\n",
            " 10  male         70000 non-null  int64  \n",
            " 11  female       70000 non-null  int64  \n",
            " 12  bmi          70000 non-null  float64\n",
            "dtypes: float64(2), int64(11)\n",
            "memory usage: 6.9 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Aufteilung der Zielvariable\n",
        "\n",
        "sns.countplot(x=df['cardio'],palette=sns.color_palette() )\n",
        "plt.xlabel(\"Zielwert\")\n",
        "plt.ylabel(\"Anzahl\" )\n",
        "plt.title(\"(0 = Keine Krankheit, 1 = Krankheit)\")\n",
        "\n",
        "plt.savefig('Zielwert.pdf',dpi=1500,bbox_inches='tight')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "Xn7spNUYKB9G",
        "outputId": "ca1e4a57-2c21-4235-f289-210c1528292b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-07c32f448318>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=df['cardio'],palette=sns.color_palette() )\n",
            "<ipython-input-9-07c32f448318>:3: UserWarning: The palette list has more values (10) than needed (2), which may not be intended.\n",
            "  sns.countplot(x=df['cardio'],palette=sns.color_palette() )\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Aufteilung des Datensatzes in Prädiktoren und Zielwerte\n",
        "X = df.drop('cardio',axis=1)\n",
        "Y = df['cardio']"
      ],
      "metadata": {
        "id": "GrXbHFLPIHcd"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Überprüfen ob NaN Werte vorhanden sind\n",
        "X.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "lTDGSZigLVUg",
        "outputId": "2247a129-789a-4775-c945-f38f6803201f"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age            0\n",
              "ap_hi          0\n",
              "ap_lo          0\n",
              "cholesterol    0\n",
              "gluc           0\n",
              "smoke          0\n",
              "alco           0\n",
              "active         0\n",
              "age_years      0\n",
              "male           0\n",
              "female         0\n",
              "bmi            0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ap_hi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ap_lo</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cholesterol</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gluc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoke</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alco</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>active</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age_years</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Daten splitten\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "EBiPnkwPxfBx"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Anwendung Gradient Boosting Classifier"
      ],
      "metadata": {
        "id": "EKqEyU7rTKFj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Modell trainieren\n",
        "\n",
        "gbr = GradientBoostingClassifier(verbose=1)\n",
        "gbr = gbr.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HU23XbGkLkTp",
        "outputId": "0e8f31f3-55c6-4685-9759-f31dbdb42f2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Iter       Train Loss   Remaining Time \n",
            "         1           1.3381            8.67s\n",
            "         2           1.2989            9.05s\n",
            "         3           1.2666            8.96s\n",
            "         4           1.2399            8.93s\n",
            "         5           1.2175            8.99s\n",
            "         6           1.1989           10.30s\n",
            "         7           1.1833           10.72s\n",
            "         8           1.1699           12.95s\n",
            "         9           1.1589           14.13s\n",
            "        10           1.1494           14.41s\n",
            "        20           1.1037           10.03s\n",
            "        30           1.0896            8.00s\n",
            "        40           1.0828            6.49s\n",
            "        50           1.0789            5.23s\n",
            "        60           1.0765            4.37s\n",
            "        70           1.0746            3.38s\n",
            "        80           1.0730            2.21s\n",
            "        90           1.0718            1.08s\n",
            "       100           1.0705            0.00s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Trainiertes Modell auf Test Set anwende\n",
        "Y_pred = gbr.predict(X_test)"
      ],
      "metadata": {
        "id": "8BPKJbWzLtbP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluationsreport und Konfusionsmatrix generieren\n",
        "report = classification_report(\n",
        "    Y_test,\n",
        "    Y_pred,\n",
        "    labels=[1, 0],\n",
        "\n",
        "    digits=2\n",
        ")\n",
        "\n",
        "print(\"Classification Report:\")\n",
        "print(report)\n",
        "\n",
        "\n",
        "cm = confusion_matrix(Y_test, Y_pred, labels=[1, 0])\n",
        "print(cm)\n",
        "\n",
        "print('Recall:')\n",
        "print(round((recall_score(Y_test, Y_pred, pos_label=1)),2))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q9SiXhqsL8ex",
        "outputId": "ff95f760-eece-4005-defb-7a08b78429a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.76      0.71      0.73      7012\n",
            "           0       0.73      0.77      0.75      6988\n",
            "\n",
            "    accuracy                           0.74     14000\n",
            "   macro avg       0.74      0.74      0.74     14000\n",
            "weighted avg       0.74      0.74      0.74     14000\n",
            "\n",
            "[[4970 2042]\n",
            " [1603 5385]]\n",
            "Recall:\n",
            "0.71\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labels = ['Krankheit (1)','Keine Krankheit (0)' ]\n",
        "\n",
        "# 2. Heatmap plotten\n",
        "plt.figure(figsize=(5, 4))\n",
        "sns.heatmap(\n",
        "    cm,\n",
        "    annot=True,         # Zahlen (z. B. TN, FP, FN, TP) in die Zellen schreiben\n",
        "    fmt='d',            # 'd' steht für ganze Zahlen (integer)\n",
        "    cmap='Blues',       # Blau-Skala; du kannst auch 'Reds', 'YlGnBu' etc. nehmen\n",
        "    xticklabels=labels, # Achsenbeschriftung unten (Predicted Labels)\n",
        "    yticklabels=labels  # Achsenbeschriftung links (True Labels)\n",
        ")\n",
        "\n",
        "plt.xlabel('Vorhergesagte Klasse')\n",
        "plt.ylabel('Wahre Klasse')\n",
        "plt.title('Confusion-Matrix GB')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "HdYaMScj1sGk",
        "outputId": "b4c02cf1-84be-4f06-b386-c00a2af901d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3.1 Hyperparamter Tuning"
      ],
      "metadata": {
        "id": "iOTFb2-jTp6l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Parameter festlegen über die varriert werden darf\n",
        "param_grid = {\n",
        "    'max_depth': [1,3,5],\n",
        "    'learning_rate': [0.01, 0.03, 0.05, 0.1, 0.2],\n",
        "    'n_estimators': [10, 50, 100, 150, 200, 300, 400, 500],}\n",
        "\n",
        "gbr_tuning = GridSearchCV(gbr, param_grid, scoring= 'recall', cv=3)\n",
        "gbr_tuning.fit(X_train, Y_train)"
      ],
      "metadata": {
        "id": "MA8RLgIMMIB4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "1da36fa1-4e48-48cb-c589-e4363149aebd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Iter       Train Loss   Remaining Time \n",
            "         1           1.3827            0.31s\n",
            "         2           1.3791            0.28s\n",
            "         3           1.3756            0.24s\n",
            "         4           1.3722            0.20s\n",
            "         5           1.3688            0.19s\n",
            "         6           1.3655            0.15s\n",
            "         7           1.3623            0.11s\n",
            "         8           1.3592            0.07s\n",
            "         9           1.3561            0.04s\n",
            "        10           1.3530            0.00s\n",
            "      Iter       Train Loss   Remaining Time \n",
            "         1           1.3825            0.30s\n",
            "         2           1.3788            0.26s\n",
            "         3           1.3751            0.24s\n",
            "         4           1.3716            0.22s\n",
            "         5           1.3681            0.18s\n",
            "         6           1.3646            0.14s\n",
            "         7           1.3613            0.10s\n",
            "         8           1.3580            0.07s\n",
            "         9           1.3547            0.04s\n",
            "        10           1.3516            0.00s\n",
            "      Iter       Train Loss   Remaining Time \n",
            "         1           1.3825            0.32s\n",
            "         2           1.3788            0.28s\n",
            "         3           1.3751            0.25s\n",
            "         4           1.3715            0.22s\n",
            "         5           1.3680            0.18s\n",
            "         6           1.3645            0.15s\n",
            "         7           1.3612            0.11s\n",
            "         8           1.3579            0.07s\n",
            "         9           1.3546            0.04s\n",
            "        10           1.3514            0.00s\n",
            "      Iter       Train Loss   Remaining Time \n",
            "         1           1.3827            1.54s\n",
            "         2           1.3791            2.18s\n",
            "         3           1.3756            2.16s\n",
            "         4           1.3722            2.09s\n",
            "         5           1.3688            1.97s\n",
            "         6           1.3655            1.86s\n",
            "         7           1.3623            1.82s\n",
            "         8           1.3592            1.74s\n",
            "         9           1.3561            1.69s\n",
            "        10           1.3530            1.67s\n",
            "        20           1.3253            1.50s\n",
            "        30           1.3019            1.25s\n",
            "        40           1.2821            0.72s\n",
            "        50           1.2652            0.00s\n",
            "      Iter       Train Loss   Remaining Time \n",
            "         1           1.3825            4.08s\n",
            "         2           1.3788            2.95s\n",
            "         3           1.3751            2.60s\n",
            "         4           1.3716            2.51s\n",
            "         5           1.3681            2.55s\n",
            "         6           1.3646            2.65s\n",
            "         7           1.3613            2.82s\n",
            "         8           1.3580            2.80s\n",
            "         9           1.3547            2.90s\n",
            "        10           1.3516            2.88s\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-144-801e439f4604>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mgbr_tuning\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgbr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;34m'recall'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mgbr_tuning\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **params)\u001b[0m\n\u001b[1;32m   1022\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1023\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1024\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1026\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1569\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1570\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1571\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1572\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    968\u001b[0m                     )\n\u001b[1;32m    969\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 970\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    971\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    972\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     75\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         )\n\u001b[0;32m---> 77\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1984\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1985\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1986\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1987\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1988\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1912\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1913\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1914\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1915\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1916\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, score_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    864\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    865\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 866\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    867\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    868\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m    785\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    786\u001b[0m         \u001b[0;31m# fit the boosting stages\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 787\u001b[0;31m         n_stages = self._fit_stages(\n\u001b[0m\u001b[1;32m    788\u001b[0m             \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    789\u001b[0m             \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stages\u001b[0;34m(self, X, y, raw_predictions, sample_weight, random_state, X_val, y_val, sample_weight_val, begin_at_stage, monitor)\u001b[0m\n\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m             \u001b[0;31m# fit next stage of trees\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 883\u001b[0;31m             raw_predictions = self._fit_stage(\n\u001b[0m\u001b[1;32m    884\u001b[0m                 \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    885\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stage\u001b[0;34m(self, i, X, y, raw_predictions, sample_weight, sample_mask, random_state, X_csc, X_csr)\u001b[0m\n\u001b[1;32m    487\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_csc\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX_csc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m             tree.fit(\n\u001b[0m\u001b[1;32m    490\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneg_g_view\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m   1402\u001b[0m         \"\"\"\n\u001b[1;32m   1403\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1404\u001b[0;31m         super()._fit(\n\u001b[0m\u001b[1;32m   1405\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1406\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    470\u001b[0m             )\n\u001b[1;32m    471\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing_values_in_feature_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Parameter und Vorhersage des verbesserten Models\n",
        "gbr_tuning.best_params_\n",
        "gbr_tuned = tuned_model.best_estimator_\n",
        "Y_tuned_pred = gbr_tuned.predict(X_test)"
      ],
      "metadata": {
        "id": "7QXqByDNUZBn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "outputId": "075a8fa2-cd9f-41f6-f19d-4e8f6790c5d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'GridSearchCV' object has no attribute 'best_params_'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-152-3006656c758b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Parameter und Vorhersage des verbesserten Models\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mgbr_tuning\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mgbr_tuned\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuned_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mY_tuned_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgbr_tuned\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'GridSearchCV' object has no attribute 'best_params_'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation des verbesserten Modells\n",
        "report = classification_report(\n",
        "    Y_test,\n",
        "    Y_pred,\n",
        "    labels=[1, 0],\n",
        "    digits=2\n",
        ")\n",
        "\n",
        "print(\"Classification Report:\\n\")\n",
        "print(report)\n",
        "\n",
        "print('Konfusionsmatrix:')\n",
        "cm = confusion_matrix(Y_test, Y_tuned_pred, labels=[1, 0])\n",
        "print(cm)\n",
        "\n",
        "\n",
        "print('Recall:')\n",
        "print(round((recall_score(Y_test, Y_tuned_pred, pos_label=1)),2))"
      ],
      "metadata": {
        "id": "Kpk4-JXqcOYg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "outputId": "a49ac322-6bdc-4d8d-c760-64573e759146"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.76      0.71      0.73      7012\n",
            "           0       0.72      0.77      0.75      6988\n",
            "\n",
            "    accuracy                           0.74     14000\n",
            "   macro avg       0.74      0.74      0.74     14000\n",
            "weighted avg       0.74      0.74      0.74     14000\n",
            "\n",
            "Konfusionsmatrix:\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'Series' object has no attribute 'tuned_pred'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-116-768d8b595cb6>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Konfusionsmatrix:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtuned_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6297\u001b[0m         ):\n\u001b[1;32m   6298\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6299\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6301\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'tuned_pred'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4.XGBoost Classifier\n"
      ],
      "metadata": {
        "id": "GxI-Z3ouPoZL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "XGB = XGBClassifier()\n",
        "XGB.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "GkHlS92DPibC",
        "outputId": "188c81f5-a105-4b1a-d666-6eb7670e0cd0"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_XGB = XGB.predict(X_test)"
      ],
      "metadata": {
        "id": "Iqw4hgPddT_A"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluationsreport und Konfusionsmatrix generieren\n",
        "report = classification_report(\n",
        "    Y_test,\n",
        "    Y_pred_XGB,\n",
        "    labels=[1, 0],\n",
        "    digits=2\n",
        ")\n",
        "\n",
        "print(\"Classification Report XGBoost:\")\n",
        "print(report)\n",
        "\n",
        "\n",
        "cm = confusion_matrix(Y_test, Y_pred_XGB, labels=[1, 0])\n",
        "print('Konfusionsmatrix:')\n",
        "print(cm)\n",
        "\n",
        "print('Recall:')\n",
        "print(round((recall_score(Y_test, Y_pred_XGB, pos_label=1)),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uy1peepKdWKn",
        "outputId": "eb19e812-708f-43d7-db03-41c3e3bb9bea"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report XGBoost:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.76      0.70      0.73      7012\n",
            "           0       0.72      0.78      0.75      6988\n",
            "\n",
            "    accuracy                           0.74     14000\n",
            "   macro avg       0.74      0.74      0.74     14000\n",
            "weighted avg       0.74      0.74      0.74     14000\n",
            "\n",
            "Konfusionsmatrix:\n",
            "[[4881 2131]\n",
            " [1552 5436]]\n",
            "Recall:\n",
            "0.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4.1 Hyperparameter Tuning"
      ],
      "metadata": {
        "id": "MI-EYDj2gBtP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid = {\n",
        "    'max_depth': [1,3,5],\n",
        "    'learning_rate': [0.01, 0.03, 0.05, 0.1, 0.2],\n",
        "    'n_estimators': [10, 50, 100, 150, 200, 300, 400, 500],}\n",
        "\n",
        "XGB_tuning = GridSearchCV(XGB, param_grid, cv=3, scoring='recall', n_jobs=-1)\n",
        "\n",
        "XGB_tuning.fit(X_train, Y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "9pwbNovSgEcV",
        "outputId": "9818f49a-8d33-458d-d85f-5e0bf6c6b653"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={'learning_rate': [0.01, 0.03, 0.05, 0.1, 0.2],\n",
              "                         'max_depth': [1, 3, 5],\n",
              "                         'n_estimators': [10, 50, 100, 150, 200, 300, 400,\n",
              "                                          500]},\n",
              "             scoring='recall')"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.03, 0.05, 0.1, 0.2],\n",
              "                         &#x27;max_depth&#x27;: [1, 3, 5],\n",
              "                         &#x27;n_estimators&#x27;: [10, 50, 100, 150, 200, 300, 400,\n",
              "                                          500]},\n",
              "             scoring=&#x27;recall&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.03, 0.05, 0.1, 0.2],\n",
              "                         &#x27;max_depth&#x27;: [1, 3, 5],\n",
              "                         &#x27;n_estimators&#x27;: [10, 50, 100, 150, 200, 300, 400,\n",
              "                                          500]},\n",
              "             scoring=&#x27;recall&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: XGBClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=3, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=200, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=3, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=200, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Parameter und Vorhersage des verbesserten Models\n",
        "print(XGB_tuning.best_params_)\n",
        "XGB_tuned = XGB_tuning.best_estimator_\n",
        "Y_tuned_pred_XGB = XGB_tuned.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dNiRa7PDhJeg",
        "outputId": "bced5f0e-5832-4f79-d3df-cfed103ec59f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 200}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluationsreport und Konfusionsmatrix generieren\n",
        "report = classification_report(\n",
        "    Y_test,\n",
        "    Y_tuned_pred_XGB,\n",
        "    labels=[1, 0],\n",
        "\n",
        "    digits=2\n",
        ")\n",
        "\n",
        "print(\"Classification Report XGBoost:\")\n",
        "print(report)\n",
        "\n",
        "\n",
        "cm = confusion_matrix(Y_test, Y_tuned_pred_XGB                                                       , labels=[1, 0])\n",
        "print('Konfusionsmatrix:')\n",
        "print(cm)\n",
        "\n",
        "print('Recall:')\n",
        "print(round((recall_score(Y_test, Y_tuned_pred_XGB, pos_label=1)),2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KMTy7uzndWCy",
        "outputId": "f5456dc2-9887-42eb-e8eb-82594cacd066"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report XGBoost:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.76      0.71      0.73      7012\n",
            "           0       0.72      0.77      0.75      6988\n",
            "\n",
            "    accuracy                           0.74     14000\n",
            "   macro avg       0.74      0.74      0.74     14000\n",
            "weighted avg       0.74      0.74      0.74     14000\n",
            "\n",
            "Konfusionsmatrix:\n",
            "[[4946 2066]\n",
            " [1574 5414]]\n",
            "Recall:\n",
            "0.71\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_tree(XGB, num_trees=0)\n",
        "plt.savefig('XGB_decision_tree_max_depth2.pdf', dpi=2000,bbox_inches='tight')\n",
        "plt.show\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "LEQWE2Qq-w4W",
        "outputId": "9a662619-935f-4d33-e13d-7f2917c58c37"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "block : bool, optional\n",
              "    Whether to wait for all figures to be closed before returning.\n",
              "\n",
              "    If `True` block and run the GUI main loop until all figure windows\n",
              "    are closed.\n",
              "\n",
              "    If `False` ensure that all figure windows are displayed and return\n",
              "    immediately.  In this case, you are responsible for ensuring\n",
              "    that the event loop is running to have responsive figures.\n",
              "\n",
              "    Defaults to True in non-interactive mode and to False in interactive\n",
              "    mode (see `.pyplot.isinteractive`).\n",
              "\n",
              "See Also\n",
              "--------\n",
              "ion : Enable interactive mode, which shows / updates the figure after\n",
              "      every plotting command, so that calling ``show()`` is not necessary.\n",
              "ioff : Disable interactive mode.\n",
              "savefig : Save the figure to an image file instead of showing it on screen.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "**Saving figures to file and showing a window at the same time**\n",
              "\n",
              "If you want an image file as well as a user interface window, use\n",
              "`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n",
              "``show()`` the figure is closed and thus unregistered from pyplot. Calling\n",
              "`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n",
              "limitation of command order does not apply if the show is non-blocking or\n",
              "if you keep a reference to the figure and use `.Figure.savefig`.\n",
              "\n",
              "**Auto-show in jupyter notebooks**\n",
              "\n",
              "The jupyter backends (activated via ``%matplotlib inline``,\n",
              "``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n",
              "the end of every cell by default. Thus, you usually don&#x27;t have to call it\n",
              "explicitly there.</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 569);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "UweUCuevmevk"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "recall_df = pd.DataFrame({\n",
        "    'Modell': [\n",
        "        'GB (default)',\n",
        "        'GB (tuned)',\n",
        "        'XGB (default)',\n",
        "        'XGB (tuned)'\n",
        "    ],\n",
        "    'Recall': [\n",
        "        0.71,\n",
        "        0.72,\n",
        "        0.7,\n",
        "        0.71\n",
        "    ]\n",
        "})\n"
      ],
      "metadata": {
        "id": "1J38CetlmBl6"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "sns.barplot(x='Modell', y='Recall', data=recall_df, palette='Paired')\n",
        "plt.ylim(0.6, 0.8)\n",
        "plt.ylabel('Recall')\n",
        "plt.xlabel('Modell')\n",
        "\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('Recall_Vergleich.pdf', dpi=1500, bbox_inches='tight')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        },
        "id": "UpXe-Gy7nXPQ",
        "outputId": "b98b7059-07d2-4b98-efe7-021a5de4f09d"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-21-4241df7a9c90>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Modell', y='Recall', data=recall_df, palette='Paired')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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e6tjx46aPn26Zs+eXec2JemFF16Qi4uLRowYobKyMkVGRuqVV165eBMHAAAAmhmLUZdLvIGLqKysTMnJyYqPj69y+hlwqWP9oqli7aKpYu1eOggWAAAAAExz6jUWAAAAAJoHggUAAAAA0wgWAAAAAEwjWKDRpKWlqUePHqqoqKixzpNPPqm+ffvWq909e/bohhtukIeHR733rc2QIUP06KOP1lonNTVVffv2VWVlZYP1i6ahLuvZ2SwWi9555x1J0rFjx+Tv768ffvjBuYPCJWHw4MFatWpVrXV+u37q6sknn1RAQMAF7VuTzZs3y2KxqKioqNZ6N9xwg956660G6RNNS13WszP9/rPNnDlzNHXqVOcN6CIiWFymbDabpk+fri5dusjDw0MBAQEaNGiQXn31VZ08edJeLyQkRBaLRRaLRa6ururQoYMmTZqkn3/++bx9zJo1S3PnznX4pvSGkJiYKC8vL+Xm5iotLa1B2/6tkJAQLVy40KFs6NChcnNz08qVKxutX9SfM9bzhYTii8nPz0/jxo1TYmKis4dy2amoqNCNN96o4cOHO5QXFxcrODhYjz/+uEP5W2+9pdtuu01t27aVp6enunfvrokTJ+rLL7+011m+fLl97VosFrVq1UqhoaFat27decezfv16FRQUaPTo0Q0zwf+Tk5OjefPm6bXXXlN+fr7uuuuuBm3/nOXLl1f7hbRz587VnDlz+ENPI2sK67khg21jeOyxx7RixQp99913zh5KoyNYXIa+++479evXT5s2bVJSUpK+/PJLZWRkaNasWXrvvff00UcfOdR/6qmnlJ+fr7y8PK1cuVKffvqppk2bVmsf6enp2r9/v/3bzRvS/v37ddNNN6lTp07y9fVt8PbPZ8KECXrppZcuer+oXlNfz40pKipKK1euVGFhobOHcllxdXXV8uXLlZqa6vBHiKlTp6pdu3YOYW/27NkaNWqU+vbtq/Xr1ys3N1erVq3SVVdd5fAFsdLZbxXOz89Xfn6+vvzyS0VGRupPf/qTcnNzax3PSy+9pKioKIfvhWoI+/fvlyTdd999CgwMvOi3+bzrrrt0/Phxvf/++xe138vN5bKeG5Ofn58iIyP16quvOnsojc/AZScyMtK44oorjBMnTlS7vbKy0v5zp06djBdeeMFh+9NPP21ce+21tfYRHR1t/PGPf6xSnpycbPj7+xutWrUyJk6caMyePdvo06ePQ50lS5YY11xzjWG1Wo3u3bsbixYtsm+T5PBITEw0DMMwZs2aZXTt2tXw9PQ0OnfubMydO9coLy+37zd+/Hjjvvvuc+hn+vTpxi233GJ/fssttxjTp0+3//z7vs45dOiQIcnYt29frf8GuDicsZ6XLVtWZX0sW7bMOHDggCHJ+PLLL+11f/75Z0OS8cknnxiGYRiffPKJIcn46KOPjNDQUMPT09MIDw839uzZ49DnO++8Y/Tr18+wWq1G586djSeffNI4ffq0ffvevXuNm2++2bBarUaPHj2MTZs2GZKMt99+26Gdzp07G3//+99rnR8ax4svvmi0bdvW+PHHH4133nnHcHNzM3bu3GnfnpGRYUgyXnzxxWr3/+3aXbZsmeHj4+OwvaKiwnBzczP+/e9/1ziGI0eOGBaLxdi9e7dDeV3WT15enjFy5EjDx8fHaNu2rfGHP/zBOHDggGEYhpGYmFjte2RWVpYRERFh+Pr6Gt7e3sbgwYON7Oxse5v1eY38/PPP9p+re983DMOIiooyxo4dW+P80XAu1fXcqVMnh/XRqVMnwzDq/nt/6tSpxsyZM422bdsaAQEBDuvLMM6uz0mTJhl+fn5G69atjVtvvdVh3oZRt882K1asMK644ooa59ZcNJ24hwbx008/adOmTYqOjpaXl1e1dSwWS437Hz58WO+++67CwsJq7Wfr1q0aMGCAQ9m///1vPfnkk0pKStIXX3yhoKCgKt94vnLlSiUkJOjZZ59VTk6OkpKS9MQTT2jFihWSpPz8fF133XWaMWOG8vPz9dhjj0mSWrdureXLl+ubb77Riy++qCVLluiFF144779HTdatW6crrrjC/tft/Px8+7Yrr7xSAQEB2rp16wW3j4bhrPU8atQozZgxQ9ddd519fYwaNapeY3/88cf1/PPP64svvlCLFi00ceJEh/7GjRun6dOn65tvvtFrr72m5cuX69lnn5UkVVZWavjw4XJ3d9f27du1ePFizZ49u9p+Bg4cyFp1kqlTp6pPnz7685//rIceekgJCQnq06ePffu//vUvtWrVSo888ki1+9e2disqKuzvi/3796+xXnp6ulq2bKkePXrYy+qyfk6fPq3IyEi1bt1aW7du1WeffaZWrVpp6NChKi8v12OPPaZly5ZJksN75PHjxzV+/Hilp6crMzNTXbt21d13363jx4+f51+rejfeeKMWLlzo8Nftc+/7Euv7YrpU1/Pnn38uSVq2bJny8/Ptz+tqxYoV8vLy0vbt2/W3v/1NTz31lD788EP79pEjR+rIkSN6//33lZ2drf79++v222+3Hwmuy2cb6exa/eGHH3Tw4MF6ja/JcXaywcWVmZlpSDLWrVvnUO7r62t4eXkZXl5exqxZs+zlnTp1Mtzd3Q0vLy/Dw8PDkGSEhYUZP//8c639+Pj4GG+88YZDWXh4uPHII484lIWFhTmk+quvvtpYtWqVQ52nn37aCA8Ptz/v06dPlb8o/N78+fON0NBQ+/P6HrEwjOr/un1Ov379jCeffLLWMaDxOXM9JyYmVvmLVH2PWJyzYcMGQ5Lxyy+/GIZhGLfffruRlJTk0PY//vEPIygoyDAMw/jggw+MFi1aGIcPH7Zvf//996s9YhEbG2sMGTKk1vmh8eTk5BiSjF69ejkccTIMwxg6dKjRu3dvh7Lnn3/evna9vLyMoqIiwzB+PUp2rtzFxcWwWq3GsmXLau3/hRdeMK666iqHsrqsn3/84x9G9+7dHf7KXFZWZnh6ehoffPCBYRiG8fbbbxvn+xhRUVFhtG7d2nj33XcNw6j/EYtzc//9X7fP+c9//mO4uLgYFRUVtY4DDeNSXM+GYVT73lfX3/s33XSTQ53rr7/emD17tmEYhrF161bD29vbOHXqlEOdq6++2njttdcMw6jbZxvDMIzi4mJDkrF58+Za59jUccQCkqSsrCzt3LlT1113ncrKyhy2zZw5Uzt37tSuXbvsF0vfc889td4d55dffpGHh4dDWU5OTpW/DIeHh9t/Li0t1f79+zVp0iS1atXK/njmmWfs5/LWZM2aNRo0aJACAwPVqlUrzZ07V3l5eXWa+4Xw9PR0uCgYl5aLsZ7N6t27t/3noKAgSdKRI0ckSV999ZWeeuoph9fB5MmTlZ+fr5MnTyonJ0fBwcHq0KGDvY3fvpZ+i7XqXEuXLlXLli114MCBOt2ha+LEidq5c6dee+01lZaWyjAM+7bWrVtr586d2rlzp7788kslJSXp4Ycf1rvvvltjezW9F59v/Xz11Vfat2+fWrdubV+D7dq106lTp2p9Py4oKNDkyZPVtWtX+fj4yNvbWydOnGi092NPT09VVlZWeZ2jcVyK69ms374XS2ffj3/7XnzixAn5+vo6vB8fOHDA/jo432ebczw9PSWp2b8ft3D2AHBxdenSRRaLpcrFUVdddZWkXxf+b/n5+alLly6SpK5du2rhwoUKDw/XJ598ooiIiGr78fPzq9Oddn7rxIkTkqQlS5ZUeZHWdmepjIwMjRkzRvPmzVNkZKR8fHy0evVqPf/88/Y6Li4uDm9o0tlD/ReqsLBQ7du3v+D90TAutfV87mLC3661mtaZm5ub/edzpwicu7vNiRMnNG/evCp3YZFU71+qrFXn2bZtm1544QVt2rRJzzzzjCZNmqSPPvrI/v/dtWtXpaen6/Tp0/b10KZNG7Vp06baD20uLi72tSud/UC0adMm/fd//7fuvffeasdwIe/F0tk1GBoaWu0d8GpbT+PHj9dPP/2kF198UZ06dZLValV4eLjKy8vtc5Dq9hqpi8LCQnl5eVX7WkfDamrrua6/93/7XiydfT/+7XtxUFCQNm/eXGW/6u5UVptzp0419/djjlhcZnx9fXXHHXfo5ZdfVmlp6QW1ce5D/i+//FJjnX79+umbb75xKOvRo4e2b9/uUJaZmWn/OSAgQB06dNB3332nLl26ODw6d+5cY1/btm1Tp06d9Pjjj2vAgAHq2rWrDh065FCnffv2DtdJSNLOnTtrnae7u3u1f8U+9xe7fv361bo/Gp8z13N16+PcL4zfrrXzrbPq9O/fX7m5uVVeB126dJGLi4t69Oih77//3qGf376Wfmv37t2sVSc4efKkJkyYoClTpujWW29VSkqKsrKytHjxYnud+++/XydOnKj2fOy6cnV1Pe/atdlsDh/G6rJ++vfvr2+//Vb+/v5V1qCPj0+N/X322WeaNm2a7r77bl133XWyWq06duyYffuFvEZqei+WWN8Xy6W8nqWz4aC69+P6/t7/vf79+8tms6lFixZVXgd+fn6Szv/Z5pzdu3fLzc1N1113Xb3G0NQQLC5Dr7zyis6cOaMBAwZozZo1ysnJUW5urv75z39qz549VY4OHD9+XDabTfn5+crKytLMmTPVvn173XjjjTX2ERkZqfT0dIey6dOna+nSpVq2bJn27t2rxMREff311w515s2bp+TkZL300kvau3ev/t//+39atmyZFixYUGNfXbt2VV5enlavXq39+/frpZde0ttvv+1Q57bbbtMXX3yhN954Q99++60SExO1e/fuWv+dQkJC9Omnn+rw4cMOvxgzMzPtf4WD8zlrPYeEhOjAgQPauXOnjh07prKyMnl6euqGG27Qc889p5ycHG3ZskVz586t95wSEhL0xhtvaN68efr666+Vk5Oj1atX29uKiIhQt27dNH78eH311VfaunVrlXvJS2c/DGRnZ+vOO++s9xhgTnx8vAzD0HPPPSfp7Hr5n//5H82aNct+8WZ4eLhmzJihGTNmKC4uTunp6Tp06JAyMzOVkpIii8XicEtNwzBks9lks9l04MABvf766/rggw9033331TiOfv36yc/PT5999pm9rC7rZ8yYMfLz89N9992nrVu36sCBA9q8ebOmTZtW6ykwXbt21T/+8Q/l5ORo+/btGjNmjMPRhAt5jYSEhOjEiRNKS0vTsWPHHE4l2bp1K+v7IriU1/O58aSlpTmEjgv5vf97ERERCg8P17Bhw7Rp0yYdPHhQ27Zt0+OPP64vvvhCUt0+20hn1+rNN9/c/I+uOeviDjjXjz/+aMTExBidO3c23NzcjFatWhkDBw405s+fb5SWltrr/f42bu3btzfuvvtuhwvvqvPTTz8ZHh4eVW6h+eyzzxp+fn5Gq1atjPHjxxuzZs2qcoHTypUrjb59+xru7u5G27ZtjcGDBztcnFvdxdszZ840fH19jVatWhmjRo0yXnjhhSoX+yUkJBgBAQGGj4+PERsba8TExNR68XZGRobRu3dvw2q1Olyg+NBDDxl/+ctfap0/Li5nrOdTp04ZI0aMMNq0aWO/3axhGMY333xjhIeHG56enkbfvn3tt/Gs6cJUwzCML7/80pBkv5WnYRhGamqqceONNxqenp6Gt7e3MXDgQOP111+3b8/NzTVuuukmw93d3ejWrZuRmppa5QLGVatWGd27d6/3vyfM2bx5s+Hq6mps3bq1yrY777zTuO222xwuil6zZo0xZMgQw8fHx3BzczOuuOIK44EHHjAyMzPtdX5/i2Or1Wp069bNePbZZ40zZ87UOp5Zs2YZo0ePdiiry/rJz883xo0bZ/j5+RlWq9W46qqrjMmTJxvFxcWGYVR/8faOHTuMAQMGGB4eHkbXrl2NtWvXVrkRxoW8Rh5++GHD19fX4XazP/zwg+Hm5mZ8//33tc4f5jSF9bx+/XqjS5cuRosWLey3mzWM+v/eNwzDuO+++4zx48fbn5eUlBhTp041OnToYLi5uRnBwcHGmDFjjLy8PHuduny26d69u/Gvf/2r1rk1BxbD+N0JaEADmTlzpkpKSvTaa685eygN5tixY+revbu++OKLWk/PQvPTFNfzDTfcoGnTpumBBx5w9lDgRDabTdddd5127NihTp06OXs4DWb27Nn6+eef9frrrzt7KLiImuJ6fv/99zVjxgzt2rVLLVo078ubORUKjebxxx9Xp06d7BdBNQcHDx7UK6+8Qqi4DDW19Xzs2DENHz5c999/v7OHAicLDAxUSkpKo94pzxn8/f319NNPO3sYuMia4nouLS3VsmXLmn2okCSOWAAAAAAwjSMWAAAAAEwjWAAAAAAwjWABAAAAwDSCBQAAAADTCBYAAAAATCNYAACapM2bN8tisaioqKjO+4SEhGjhwoX25xaLRe+8806Djw0ALkcECwBAo5gwYYIsFosefvjhKtuio6NlsVg0YcKEiz8wAECjIFgAABpNcHCwVq9erV9++cVedurUKa1atUpXXnmlE0cGAGhoBAsAQKPp37+/goODtW7dOnvZunXrdOWVV6pfv372srKyMk2bNk3+/v7y8PDQTTfdpM8//9yhrY0bN6pbt27y9PTUrbfeqoMHD1bpLz09XTfffLM8PT0VHBysadOmqbS0tNHmBwD4FcECANCoJk6cqGXLltmfL126VFFRUQ51Zs2apbfeeksrVqzQjh071KVLF0VGRqqwsFCS9P3332v48OG69957tXPnTj344IOaM2eOQxv79+/X0KFDNWLECO3atUtr1qxRenq6YmJiGn+SAACCBQCgcY0dO1bp6ek6dOiQDh06pM8++0xjx461by8tLdWrr76q+fPn66677tK1116rJUuWyNPTUykpKZKkV199VVdffbWef/55de/eXWPGjKlyfUZycrLGjBmjRx99VF27dtWNN96ol156SW+88YZOnTp1MacMAJelFs4eAACgeWvfvr3uueceLV++XIZh6J577pGfn599+/79+3X69GkNGjTIXubm5qaBAwcqJydHkpSTk6OwsDCHdsPDwx2ef/XVV9q1a5dWrlxpLzMMQ5WVlTpw4IB69OjRGNMDAPwfggUAoNFNnDjRfkrSokWLGqWPEydO6C9/+YumTZtWZRsXigNA4yNYAAAa3dChQ1VeXi6LxaLIyEiHbVdffbXc3d312WefqVOnTpKk06dP6/PPP9ejjz4qSerRo4fWr1/vsF9mZqbD8/79++ubb75Rly5dGm8iAIAacY0FAKDRubq6KicnR998841cXV0dtnl5eWnKlCmaOXOmUlNT9c0332jy5Mk6efKkJk2aJEl6+OGH9e2332rmzJnKzc3VqlWrtHz5cod2Zs+erW3btikmJkY7d+7Ut99+q//85z9cvA0AFwnBAgBwUXh7e8vb27vabc8995xGjBihP//5z+rfv7/27dunDz74QG3btpV09lSmt956S++884769OmjxYsXKykpyaGN3r17a8uWLdq7d69uvvlm9evXTwkJCerQoUOjzw0AIFkMwzCcPQgAAAAATRtHLAAAAACYRrAAAAAAYBrBAgAAAIBpBAsAAAAAphEsAAAAAJhGsAAAAABgGsECAAAAgGkECwAAAACmESwAAAAAmEawAAAAAGAawQIAAACAaQQLAAAAAKb9/7p1Xsn2QBAzAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create an explainer for XGBoost\n",
        "explainer = shap.Explainer(XGB_tuned, X_train)  # X_train is your feature set\n",
        "shap_values = explainer(X_train)  # Compute SHAP values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yx_SBmG3xqmN",
        "outputId": "e8f5ac75-d904-402e-a7fd-54ef2dd28036"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|===================| 55766/56000 [02:48<00:00]       "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#shap.summary_plot(shap_values, X_train)\n",
        "shap.summary_plot(\n",
        "    shap_values,\n",
        "    X_train,\n",
        "    plot_type=\"dot\",       # Punktwolken‐Plot (Bienenstock)\n",
        "    cmap=\"crest\",        # <- zum Beispiel Matplotlibs “viridis”‐Farbkarte\n",
        "    show=False )\n",
        "\n",
        "plt.gca().set_xlabel('')  # Entfernt den x-Achsentitel\n",
        "plt.gca().set_ylabel('')  # Entfernt den y-Achsentitel\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 636
        },
        "id": "ZRfopkl8yyK7",
        "outputId": "1d151c71-2981-4dd6-a6c0-630ae3d36bf8"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x630 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}